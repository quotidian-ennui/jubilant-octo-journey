set positional-arguments := true

TF_BINARY := env_var_or_default("TF_BINARY", "tofu")
PULSAR_UI_USERNAME := env_var_or_default("PULSAR_UI_USERNAME", "admin")
PULSAR_UI_PASSWORD := env_var_or_default("PULSAR_UI_PASSWORD", "pulsar")
# Check http://localhost:7750/swagger-ui.html for more swagger fun.
PULSAR_UI_LOGIN_URL := "http://localhost:7750/pulsar-manager/login"

[private]
@help:
  just --list --list-prefix "  "

# Wraps docker compose (up -d | down | stop )
@docker *args='':
  docker compose "$@"

# Configure the UI
configure_ui:
  #!/usr/bin/env bash

  set -eo pipefail
  docker-health-check() {
    local container_id=$1
    local state=$(docker inspect -f {{{{.State.Health.Status}} $container_id)
    while [ "$state" != "healthy" ]; do
      echo Waiting for ${container_id} to reach 'healthy'
      sleep 5
      state=$(docker inspect -f {{{{.State.Health.Status}} $container_id)
    done
    echo ${container_id} is 'healthy'
  }

  docker-health-check pulsar_ui
  CSRF_TOKEN=$(curl -s http://localhost:7750/pulsar-manager/csrf-token)
  # In order to use pulsar-manager endpoints we need to store cookies so capture the cookies
  # in a file.
  COOKIE_JAR=$(mktemp --tmpdir docker-pulsar-cookies.XXXXXX)
  HEADER_JAR=$(mktemp --tmpdir docker-pulsar-headers.XXXXXX)
  {
    echo "X-XSRF-TOKEN: $CSRF_TOKEN"
    echo "Cookie: XSRF-TOKEN=$CSRF_TOKEN;"
    echo "Content-Type: application/json"
  } > "$HEADER_JAR"

  ## This is a bit dumb but we try to login, and if its successful then we don't need to create a user?
  ## The UI isn't that clever since it will create 2 users with the same name+password if you call superuser 2x...
  LOGIN_TOKEN=$(curl -fSsL -j -c "$COOKIE_JAR" -D - \
    -H @"$HEADER_JAR" \
    -X POST "{{ PULSAR_UI_LOGIN_URL }}" \
    -d '{ "username": "{{ PULSAR_UI_USERNAME }}", "password": "{{ PULSAR_UI_PASSWORD }}"}' -o /dev/null | grep "token:" ) || true
  if [[ -z "$LOGIN_TOKEN" ]]; then
    curl -fSsL \
      -H @"$HEADER_JAR" \
      -X PUT "http://localhost:7750/pulsar-manager/users/superuser" \
      -d '{"name": "{{ PULSAR_UI_USERNAME }}", "password": "{{ PULSAR_UI_PASSWORD }}", "description": "test", "email": "username@test.org"}'
    echo -e "\n>>> Created User..."
    # Cheeky use of dump headers since you can't really use -I with -d
    LOGIN_TOKEN=$(curl -fSsL -j -c "$COOKIE_JAR" -D - \
      -H @"$HEADER_JAR" \
      -X POST "{{ PULSAR_UI_LOGIN_URL }}" \
      -d '{ "username": "{{ PULSAR_UI_USERNAME }}", "password": "{{ PULSAR_UI_PASSWORD }}"}' -o /dev/null | grep "token:" )
  fi
  echo ">>> Logged in..."
  ## Now create the environment...; if the environment exists
  # we still get a 200 OK, so just emit the output.
  curl -fSsL -b "$COOKIE_JAR" \
    -H @"$HEADER_JAR" \
    -H "$LOGIN_TOKEN" \
    -H "username: {{ PULSAR_UI_USERNAME }}" \
    -X PUT "http://localhost:7750/pulsar-manager/environments/environment" \
    -d '{ "bookie": "http://broker:6650", "broker": "http://broker:8080", "name": "docker"}'
  echo -e "\n>>> Created Environment"
  rm -f "$COOKIE_JAR" "$HEADER_JAR"
  echo "http://localhost:9527 should now be configured ('{{ PULSAR_UI_USERNAME }}/{{ PULSAR_UI_PASSWORD }}')"

# Convenience to startup and wait for ui readiness
@start: (docker "up" "-d") configure_ui

# Cleanup & Purge any data
@purge:
  docker compose down
  -docker volume rm pulsar_zookeeper pulsar_bookkeeper >/dev/null 2>&1
